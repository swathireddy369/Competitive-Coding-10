// Time Complexity :O(1)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach:


// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html

class PeekingIterator implements Iterator<Integer> {
    private Iterator<Integer> itr;
    private Integer next;
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
        this.itr=iterator;
        if(this.itr.hasNext()){
            this.next=this.itr.next();//initializing the next 
        }
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
     return next;
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
        Integer result=next;
        //before returning just initializing next 
	    if(itr.hasNext()){
            next=itr.next();
        }else{
            next=null;
        }
        return result;
	}
	
	@Override
	public boolean hasNext() {
	    if(next != null){
            return true;
        }
        return false;
	}
}